import { MonitorSpan } from '../entities/monitor-span.entity';
import { MonitorSpanMap } from './monitor-span.map';

const id = '';
const locationId = '';
const mpcValue = 0;
const mecValue = 0;
const maxLowRange = 0;
const spanValue = 0;
const fullScaleRange = 0;
const beginDate = new Date(Date.now());
const beginHour = 12;
const endDate = new Date(Date.now());
const endHour = 12;
const defaultHighRange = 0;
const flowSpanValue = 0;
const flowFullScaleRange = 0;
const componentTypeCode = '';
const spanScaleCode = '';
const spanMethodCode = '';
const userId = '';
const updateDate = new Date(Date.now());
const spanUnitsOfMeasureCode = '';

const entity = new MonitorSpan();
entity.id = id;
entity.locationId = locationId;
entity.mpcValue = mpcValue;
entity.mecValue = mecValue;
entity.maxLowRange = maxLowRange;
entity.spanValue = spanValue;
entity.fullScaleRange = fullScaleRange;
entity.beginDate = beginDate;
entity.beginHour = beginHour;
entity.endDate = endDate;
entity.endHour = endHour;
entity.defaultHighRange = defaultHighRange;
entity.flowSpanValue = flowSpanValue;
entity.flowFullScaleRange = flowFullScaleRange;
entity.componentTypeCode = componentTypeCode;
entity.spanScaleCode = spanScaleCode;
entity.spanMethodCode = spanMethodCode;
entity.userid = userId;
entity.updateDate = updateDate;
entity.spanUnitsOfMeasureCode = spanUnitsOfMeasureCode;

describe('MonitorSpanMap', () => {
  it('maps an entity to a dto', async () => {
    const map = new MonitorSpanMap();
    const result = await map.one(entity);
    expect(result.id).toEqual(id);
    expect(result.locationId).toEqual(locationId);
    expect(result.mpcValue).toEqual(mpcValue);
    expect(result.mecValue).toEqual(mecValue);
    expect(result.maxLowRange).toEqual(maxLowRange);
    expect(result.spanValue).toEqual(spanValue);
    expect(result.fullScaleRange).toEqual(fullScaleRange);
    expect(result.beginDate).toEqual(beginDate);
    expect(result.beginHour).toEqual(beginHour);
    expect(result.endDate).toEqual(endDate);
    expect(result.endHour).toEqual(endHour);
    expect(result.defaultHighRange).toEqual(defaultHighRange);
    expect(result.flowSpanValue).toEqual(flowSpanValue);
    expect(result.flowFullScaleRange).toEqual(flowFullScaleRange);
    expect(result.componentTypeCode).toEqual(componentTypeCode);
    expect(result.spanScaleCode).toEqual(spanScaleCode);
    expect(result.spanMethodCode).toEqual(spanMethodCode);
    expect(result.userid).toEqual(userId);
    expect(result.updateDate).toEqual(updateDate);
    expect(result.spanUnitsOfMeasureCode).toEqual(spanUnitsOfMeasureCode);
    expect(result.active).toEqual(false);
  });
});
